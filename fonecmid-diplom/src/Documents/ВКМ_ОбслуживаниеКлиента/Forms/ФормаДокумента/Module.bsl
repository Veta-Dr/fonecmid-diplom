
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = СтрШаблон("Создан документ на обслуживание %1", Объект.Клиент);
	ИначеЕсли Объект.ДатаПроведенияРабот <> Объект.Ссылка.ДатаПроведенияРабот Тогда
		ТекстСообщения = СтрШаблон("Обслуживание %1 перенесено с %2 на %3", Объект.Клиент, Формат(Объект.Ссылка.ДатаПроведенияРабот,"ДФ=dd.MM.yyyy") , Формат(Объект.ДатаПроведенияРабот,"ДФ=dd.MM.yyyy"));
	ИначеЕсли Объект.ВремяНачалаРабот <> Объект.Ссылка.ВремяНачалаРабот Или Объект.ВремяОкончанияРабот <> Объект.Ссылка.ВремяОкончанияРабот Тогда
		ТекстСообщения = СтрШаблон("Время обслуживания %1 перенесено с %2 на %3", Объект.Клиент, Формат(Объект.ВремяНачалаРабот,"ДЛФ=T") , Формат(Объект.ВремяОкончанияРабот,"ДЛФ=T"));
	ИначеЕсли Объект.Специалист <> Объект.Ссылка.Специалист Тогда
		ТекстСообщения = СтрШаблон("На обслуживание %1 изменено специалист - %2", Объект.Клиент, Объект.Специалист);
	Иначе 
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
	НовыйЭлемент.ТекстСообщения = ТекстСообщения;
	НовыйЭлемент.Записать();	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти


#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти