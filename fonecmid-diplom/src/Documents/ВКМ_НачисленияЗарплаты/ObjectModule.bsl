
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвижения();
	
	РассчитатьОклад();
	РассчитатьПрочиеОсновныеНачисления();
	
	РассчитатьОтпуск();
	РассчитатьУдержания();
	
	ВзаиморасчетыССотрудниками();
	
КонецПроцедуры

Процедура СформироватьДвижения()
	
	СформироватьДвиженияПоОкладу();
	СформироватьДвиженияПрочиеОсновныеНачисления();
	СформироватьДвиженияУдержания();
	
	СформироватьСторноЗаписи();
	
	Движения.ВКМ_ОсновныеНачисления.Записать(); 
	Движения.ВКМ_Удержания.Записать();
КонецПроцедуры

Процедура СформироватьДвиженияПоОкладу()
	
	Отбор = Новый Структура("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	
	СтрокиОклада = Начисления.НайтиСтроки(Отбор);
	
	Если СтрокиОклада.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяДатаНачала = СтрокиОклада[0].ДатаНачала;
	МаксимальнаяДатаОкончания = СтрокиОклада[0].ДатаОкончания;
	
	Для Сч = 1 По СтрокиОклада.Количество() - 1 Цикл
		
		Если МинимальнаяДатаНачала > СтрокиОклада[Сч].ДатаНачала Тогда
			МинимальнаяДатаНачала = СтрокиОклада[Сч].ДатаНачала;
		КонецЕсли;
		
		Если МаксимальнаяДатаОкончания < СтрокиОклада[Сч].ДатаОкончания Тогда
			МаксимальнаяДатаОкончания = СтрокиОклада[Сч].ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_НачисленияЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_НачисленияЗарплатыНачисления.ВидРасчета КАК ВидРасчета,
		|	ВКМ_НачисленияЗарплатыНачисления.КатегорияСотрудника КАК КатегорияСотрудника,
		|	ВКМ_НачисленияЗарплатыНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|	ВКМ_НачисленияЗарплатыНачисления.ДатаНачала КАК ДатаНачала,
		|	ВКМ_НачисленияЗарплатыНачисления.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ПериодыОкладаИсходные
		|ИЗ
		|	Документ.ВКМ_НачисленияЗарплаты.Начисления КАК ВКМ_НачисленияЗарплатыНачисления
		|ГДЕ
		|	ВКМ_НачисленияЗарплатыНачисления.Ссылка = &Ссылка
		|	И ВКМ_НачисленияЗарплатыНачисления.ВидРасчета = &Оклад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Период КАК Период,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад КАК Оклад
		|ПОМЕСТИТЬ ВТ_ИзменениеОклада
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(
		|			&МинимальнаяДатаНачала,
		|			Сотрудник В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВТ_ПериодыОкладаИсходные.Сотрудник КАК Сотрудник
		|				ИЗ
		|					ВТ_ПериодыОкладаИсходные КАК ВТ_ПериодыОкладаИсходные)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудников.Период,
		|	ВКМ_УсловияОплатыСотрудников.Сотрудник,
		|	ВКМ_УсловияОплатыСотрудников.Оклад
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_УсловияОплатыСотрудников
		|ГДЕ
		|	ВКМ_УсловияОплатыСотрудников.Период > &МинимальнаяДатаНачала
		|	И ВКМ_УсловияОплатыСотрудников.Период <= &МаксимальнаяДатаОкончания
		|	И ВКМ_УсловияОплатыСотрудников.Сотрудник В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_ПериодыОкладаИсходные.Сотрудник КАК Сотрудник
		|			ИЗ
		|				ВТ_ПериодыОкладаИсходные КАК ВТ_ПериодыОкладаИсходные)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаНачала.Период КАК ДатаНачала,
		|	ДатаНачала.Сотрудник КАК Сотрудник,
		|	ДатаНачала.Оклад КАК Оклад,
		|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ДатаОкончания.Период, СЕКУНДА, -1), ДАТАВРЕМЯ(3999, 12, 31))) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ИнтервалОклада
		|ИЗ
		|	ВТ_ИзменениеОклада КАК ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзменениеОклада КАК ДатаОкончания
		|		ПО ДатаНачала.Сотрудник = ДатаОкончания.Сотрудник
		|			И ДатаНачала.Период < ДатаОкончания.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатаНачала.Сотрудник,
		|	ДатаНачала.Оклад,
		|	ДатаНачала.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыОкладаИсходные.Сотрудник КАК Сотрудник,
		|	ВТ_ПериодыОкладаИсходные.КатегорияСотрудника КАК КатегорияСотрудника,
		|	ВТ_ПериодыОкладаИсходные.ВидРасчета КАК ВидРасчета,
		|	ВТ_ПериодыОкладаИсходные.ГрафикРаботы КАК ГрафикРаботы,
		|	ВТ_ИнтервалОклада.Оклад КАК Показатель,
		|	ВЫБОР
		|		КОГДА ВТ_ИнтервалОклада.ДатаНачала > ВТ_ПериодыОкладаИсходные.ДатаНачала
		|			ТОГДА ВТ_ИнтервалОклада.ДатаНачала
		|		ИНАЧЕ ВТ_ПериодыОкладаИсходные.ДатаНачала
		|	КОНЕЦ КАК ПериодДействияНачало,
		|	ВЫБОР
		|		КОГДА ВТ_ИнтервалОклада.ДатаОкончания < ВТ_ПериодыОкладаИсходные.ДатаОкончания
		|			ТОГДА ВТ_ИнтервалОклада.ДатаОкончания
		|		ИНАЧЕ ВТ_ПериодыОкладаИсходные.ДатаОкончания
		|	КОНЕЦ КАК ПериодДействияКонец
		|ИЗ
		|	ВТ_ПериодыОкладаИсходные КАК ВТ_ПериодыОкладаИсходные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнтервалОклада КАК ВТ_ИнтервалОклада
		|		ПО ВТ_ПериодыОкладаИсходные.Сотрудник = ВТ_ИнтервалОклада.Сотрудник
		|			И ВТ_ПериодыОкладаИсходные.ДатаОкончания >= ВТ_ИнтервалОклада.ДатаНачала
		|			И ВТ_ПериодыОкладаИсходные.ДатаНачала <= ВТ_ИнтервалОклада.ДатаОкончания";
	
	Запрос.УстановитьПараметр("МинимальнаяДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("МаксимальнаяДатаОкончания", МаксимальнаяДатаОкончания);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.ПериодРегистрации = Дата;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПрочиеОсновныеНачисления()
	
	Для Каждого Строка Из Начисления Цикл
		
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.ПериодРегистрации = Дата;
		Движение.ВидРасчета = Строка.ВидРасчета;
		Движение.ПериодДействияНачало = Строка.ДатаНачала;
		Движение.ПериодДействияКонец = Строка.ДатаОкончания;
		Движение.Сотрудник = Строка.Сотрудник;
		Движение.КатегорияСотрудника = Строка.КатегорияСотрудника;
		Движение.ГрафикРаботы = Строка.ГрафикРаботы;

		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачала, -12));
			Движение.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(Строка.ДатаНачала, -1));
			Движение.ДнейОтработано =  (Строка.ДатаОкончания -  Строка.ДатаНачала) / 86400 + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьОклад()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ДнейФактическийПериодДействия, 0) КАК Факт,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ДнейПериодДействия, 0) КАК Норма
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|			ВидРасчета = &Оклад
		|				И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Движение.Сумма = Движение.Показатель * Выборка.Факт / Выборка.Норма;
		Движение.ДнейОтработано = Выборка.Факт; 
		
		Если Движение.Сторно Тогда
			Движение.Сумма = - Движение.Сумма;
			Движение.ДнейОтработано = - Движение.ДнейОтработано;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(,Истина);
	
КонецПроцедуры

Процедура РассчитатьПрочиеОсновныеНачисления()
	
	Отбор = Новый Структура("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.ПроцентОбслуживанияКлиентов);
	
	СтрокиОклада = Начисления.НайтиСтроки(Отбор);
	
	Если СтрокиОклада.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяДатаНачала = СтрокиОклада[0].ДатаНачала;
	МаксимальнаяДатаОкончания = СтрокиОклада[0].ДатаОкончания;
	
	Для Сч = 1 По СтрокиОклада.Количество() - 1 Цикл
		
		Если МинимальнаяДатаНачала > СтрокиОклада[Сч].ДатаНачала Тогда
			МинимальнаяДатаНачала = СтрокиОклада[Сч].ДатаНачала;
		КонецЕсли;
		
		Если МаксимальнаяДатаОкончания < СтрокиОклада[Сч].ДатаОкончания Тогда
			МаксимальнаяДатаОкончания = СтрокиОклада[Сч].ДатаОкончания;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ВыполненныеСотрудникомРаботыОбороты.Специалист КАК Специалист,
		|	ВКМ_ВыполненныеСотрудникомРаботыОбороты.СуммаКОплатеОборот КАК СуммаКОплатеОборот
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы.Обороты(&ДатаНачала, &ДатаОкончания, , ) КАК ВКМ_ВыполненныеСотрудникомРаботыОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СуммаКОплатеОборот КАК СуммаКОплатеОборот,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Процент) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ПО ВТ.Специалист = ВКМ_ОсновныеНачисленияДанныеГрафика.Сотрудник";
	
	Запрос.УстановитьПараметр("Процент", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.ПроцентОбслуживанияКлиентов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", МаксимальнаяДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Движение.Сумма = Выборка.СуммаКОплатеОборот;
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(,Истина);
	
КонецПроцедуры

Процедура РассчитатьОтпуск()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.СуммаБаза, 0) КАК СуммаБаза,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ДнейОтработаноБаза, 0) КАК ДнейОтработаноБаза,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ДнейОтработано, 0) КАК ДнейОтпуска
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_ОсновныеНачисления.ВидРасчета = &Отпуск";
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		
		Движение.ДнейОтработано = Выборка.ДнейОтпуска;
		
		Если Выборка.ДнейОтработаноБаза = 0 Тогда
			Движение.Сумма = 0;
			Продолжить;
		КонецЕсли;
		
		Движение.Сумма = Выборка.СуммаБаза / Выборка.ДнейОтработаноБаза * Выборка.ДнейОтпуска;
		
		Если Движение.Сторно Тогда
			Движение.Сумма = - Движение.Сумма;
			Движение.ДнейОтработано = - Движение.ДнейОтработано;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(,Истина);
	
КонецПроцедуры

Процедура СформироватьСторноЗаписи()
	
	СторноЗаписи = Движения.ВКМ_ОсновныеНачисления.ПолучитьДополнение();
	
	Для каждого Сорно  Из СторноЗаписи Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить(); 
		ЗаполнитьЗначенияСвойств(Движение, Сорно); 
		
		Движение.ПериодРегистрации = Дата; 
		Движение.ПериодДействияНачало = Сорно.ПериодДействияНачалоСторно; 
		Движение.ПериодДействияКонец = Сорно.ПериодДействияКонецСторно; 
		Движение.Сторно = Истина; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияУдержания()
	
	Для Каждого Строка Из Начисления Цикл
		
		Движение = Движения.ВКМ_Удержания.Добавить();
		Движение.ПериодРегистрации = Дата;
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		Движение.Сотрудник = Строка.Сотрудник;
		Движение.БазовыйПериодНачало = НачалоМесяца(Дата);
		Движение.БазовыйПериодКонец = КонецМесяца(Дата);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьУдержания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ВКМ_ОсновныеНачисления.Сумма * 0.13 КАК НДФЛ
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_Удержания[Выборка.НомерСтроки - 1];
		
		Движение.Сумма = Выборка.НДФЛ;
		
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать(,Истина);
	
КонецПроцедуры

Процедура ВзаиморасчетыССотрудниками()
	
	// регистр ВКМ_ВзаиморасчетыССотрудниками Приход
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	СУММА(ВКМ_ОсновныеНачисления.Сумма - ВКМ_Удержания.Сумма) КАК Сумма
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
	|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_Удержания.НомерСтроки
	|ГДЕ
	|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
	|	И ВКМ_ОсновныеНачисления.Сумма <> 0
	|	И ВКМ_Удержания.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ОсновныеНачисления.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Сотрудник = Выборка.Сотрудник;
		Движение.Сумма = Выборка.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры



























